{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#gemini-cli-interact-with-googles-ai-on-the-command-line","title":"Gemini CLI: Interact with Google's AI on the Command Line","text":"<p>This is a command-line interface (CLI) for interacting with Google's Gemini large language models (LLMs) using your Gemini API key. It allows you to:</p> <ul> <li>Generate text:  Prompt Gemini for creative text formats, like poems, code, scripts, musical pieces, email,   letters, etc.</li> <li>Summarize YouTube videos: Provide a YouTube URL and get a concise summary of the video content.</li> <li>Ask questions about YouTube videos:  After summarizing a video, use Gemini's knowledge to answer your questions   about the content.</li> </ul>"},{"location":"#features","title":"Features:","text":"<ul> <li>Simple and easy-to-use interface</li> <li>Integrates with YouTube summaries for informed questioning</li> <li>Leverages the power of Google's Gemini LLMs</li> </ul>"},{"location":"#requirements","title":"Requirements:","text":"<ul> <li>Gemini API key: Obtain a key from [https://ai.google.dev/gemini-api/docs/api-key) (Free tier available)</li> </ul>"},{"location":"#installation","title":"Installation:","text":"<p>There are two ways to get started with Gemini CLI:</p> <ol> <li> <p>Download a pre-built executable (if available):</p> <ul> <li>Check the project's Releases section on GitHub for downloadable executables (.exe for Windows, etc.). This is the   easiest option if available for your operating system.</li> <li>Download the appropriate installer for your system and follow the installation instructions.</li> </ul> </li> <li> <p>Build from source (for advanced users or when pre-built executables are not available):</p> <ul> <li>Prerequisites:<ul> <li>Python 3.x (https://www.python.org/downloads/)</li> </ul> </li> <li> <p>Steps:</p> <ul> <li>Clone this repository:</li> </ul> <p><code>bash   git clone https://github.com/aiyu-ayaan/Gemini-CLI</code>   (Replace <code>your-username</code> with your GitHub username)</p> <ul> <li>Install dependencies:</li> </ul> <p><code>bash   cd Gemini-CLI   pip install -r requirements.txt</code></p> </li> </ul> </li> </ol>"},{"location":"#usage","title":"Usage:","text":"<p>The Gemini CLI provides several command-line arguments to interact with the tool. Below are the supported arguments and their descriptions.</p>"},{"location":"#arguments","title":"Arguments:","text":"<ul> <li> <p><code>--question</code>, <code>-q</code>:</p> <ul> <li>Type: <code>str</code></li> <li>Description: The question to ask Gemini.</li> <li>Example: <code>--question \"What is the capital of France?\"</code></li> </ul> </li> <li> <p><code>--word-limit</code>, <code>-wl</code>:</p> <ul> <li>Type: <code>int</code></li> <li>Default: <code>0</code></li> <li>Description: Sets the word limit for the response from Gemini.</li> <li>Example: <code>--word-limit 50</code></li> </ul> </li> <li> <p><code>--info</code>, <code>-i</code>:</p> <ul> <li>Action: <code>InfoAction</code></li> <li>Description: Displays information about the Gemini CLI.</li> <li>Example: <code>--info</code></li> </ul> </li> <li> <p><code>--youtube</code>, <code>-yt</code>:</p> <ul> <li>Type: <code>str</code></li> <li>Description: YouTube URL to get the transcript from.</li> <li>Example: <code>--youtube \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"</code></li> </ul> </li> </ul>"},{"location":"#examples","title":"Examples:","text":"<p>To summarize a YouTube video, you can use the <code>-yt</code>, <code>-wl</code>, and <code>-q</code> tags together. Below is an example of how to use these tags:</p> <pre><code>python gemini-cli -yt \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" -wl 100 -q \"Summarize the main points of this video.\"\n</code></pre> <p>In this example:</p> <ul> <li>The <code>-yt</code> tag specifies the YouTube URL.</li> <li>The <code>-wl</code> tag sets a word limit of 100 words for the response.</li> <li>The <code>-q</code> tag provides the question to ask Gemini which in this case is to summarize the main points of the video.</li> </ul>"},{"location":"#examples_1","title":"Examples","text":""},{"location":"#asking-a-question","title":"Asking a Question","text":"<pre><code>python gemini-cli -q \"What is the weather like today?\"\n</code></pre>"},{"location":"#setting-a-word-limit-for-the-response","title":"Setting a Word Limit for the Response","text":"<pre><code>python gemini-cli -q \"Explain the theory of relativity.\" -wl 50\n</code></pre>"},{"location":"#getting-information-about-the-cli","title":"Getting Information About the CLI","text":"<pre><code>python gemini-cli -i\n</code></pre>"},{"location":"#summarizing-a-youtube-video","title":"Summarizing a YouTube Video","text":"<pre><code>python gemini-cli -yt \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n</code></pre>"},{"location":"#asking-a-question-about-a-youtube-video","title":"Asking a Question About a YouTube Video","text":"<pre><code>python gemini-cli -yt \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" -wl 100 -q \"What are the main points discussed in this video?\"\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to &lt;https://unlicense.org&gt;\n\n</code></pre>"},{"location":"commands/","title":"Commands","text":"<p>Gemini CLI Commands</p> <p>This Markdown table provides a comprehensive overview of the command-line arguments available for interacting with Gemini:</p> Argument Shorthand Type Description Default <code>question</code> <code>-q</code> <code>str</code> The question you want to ask Gemini. This is a required argument. Required <code>word-limit</code> <code>-wl</code> <code>int</code> Sets the maximum number of words Gemini should use in its response. A value of 0 indicates no limit. 0 <code>info</code> <code>-i</code> <code>InfoAction</code> (custom action) Displays information about the Gemini CLI. <code>youtube</code> <code>-yt</code> <code>str</code> Provides a YouTube URL from which Gemini can extract the transcript and potentially answer questions based on the content. <code>pdf</code> <code>p</code> <code>str</code> PDF file path to summarize <code>start-page-index</code> <code>spi</code> <code>int</code> Start page index for the PDF file 0 <code>end-page-index</code> <code>epi</code> <code>int</code> End page index for the PDF file <code>export-docx</code> <code>ed</code> <code>str</code> Export the response to docx file <code>output-path</code> <code>op</code> <code>str</code> Output path for the docx file . <p>Detailed Explanations:</p> <ul> <li><code>question</code> (<code>-q</code>): This is the core argument for interacting with Gemini. You must provide a clear and concise   question for Gemini to process.</li> <li><code>word-limit</code> (<code>-wl</code>): This optional argument allows you to control the verbosity of Gemini's response. By   specifying a word limit (e.g., <code>-wl 50</code>), you can ensure that the response stays focused and avoids going off on   tangents. A value of 0 indicates that Gemini can use as many words as necessary to provide a comprehensive answer.</li> <li><code>info</code> (<code>-i</code>): This custom action argument displays essential information about the Gemini CLI, such as its   version, usage instructions, or any relevant copyright or licensing details. The specific information shown will   depend on how the <code>InfoAction</code> class is implemented.</li> <li><code>youtube</code> (<code>-yt</code>): This optional argument allows you to provide a YouTube URL. Gemini can potentially extract the   transcript from the video and use it as a source of information to answer your questions. This functionality depends   on Gemini's capabilities and might not be available in all cases.</li> <li><code>pdf</code> (<code>-p</code>): This optional argument allows you to specify the path to a PDF file that you want Gemini to   summarize.</li> <li><code>start-page-index</code> (<code>-spi</code>): This optional argument allows you to specify the start page index for the PDF file.</li> <li><code>end-page-index</code> (<code>-epi</code>): This optional argument allows you to specify the end page index for the PDF file.</li> <li><code>export-docx</code> (<code>-ed</code>): This optional argument allows you to export the response to a docx file.</li> <li><code>output-path</code> (<code>-op</code>): This optional argument allows you to specify the output path for the docx file. If not   specified, the docx file will be saved in the current directory.</li> <li>Note: The availability of certain features like PDF summarization or YouTube transcript processing may depend on   the specific implementation of Gemini and the underlying libraries or APIs it uses.</li> </ul> <p>Example Usage:</p> <pre><code># Ask a question with no word limit\ngemini -q \"What is the capital of France?\"\n\n# Ask a question with a word limit of 100 words\ngemini -q \"Explain the concept of artificial intelligence\" -wl 100\n\n# Get information about Gemini CLI\ngemini -i\n\n# (if supported) Ask a question based on a YouTube transcript\ngemini -q \"Who is the director of this movie?\" -yt https://www.youtube.com/watch?v=...\n\n# Summarize a PDF file\ngemini -p \"path/to/file.pdf\"\n\n# Summarize a specific range of pages from a PDF file\ngemini -p \"path/to/file.pdf\" -spi 5 -epi 10\n\n# Ask a question from a provided PDF file\ngemini -p \"path/to/file.pdf\" -q \"What is the main idea of this document?\"\n\n# Export the response to a docx file\ngemini -q \"What is the capital of France?\" -ed \"output.docx\"\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gemini-cli<ul> <li>export<ul> <li>ExportDocx</li> </ul> </li> <li>gemini<ul> <li>gemini</li> <li>youtube_transcript</li> </ul> </li> <li>gemini-cli</li> <li>pdf<ul> <li>pypdf_helper</li> </ul> </li> <li>version</li> </ul> </li> </ul>"},{"location":"reference/gemini-cli/gemini-cli/","title":"gemini-cli","text":""},{"location":"reference/gemini-cli/gemini-cli/#gemini-cli.gemini-cli.create_key_file","title":"<code>create_key_file()</code>","text":"<p>Create a key file if it does not exist.</p> Source code in <code>src/gemini-cli/gemini-cli.py</code> <pre><code>def create_key_file():\n    \"\"\"Create a key file if it does not exist.\"\"\"\n    try:\n        print('Generating key file from https://ai.google.dev/gemini-api/docs/api-key')\n        api_key = input('Enter your key: ')\n        while len(api_key) == 0:\n            console.print('Key cannot be empty.\\nLink to generate key https://ai.google.dev/gemini-api/docs/api-key',\n                          style='bold red')\n            api_key = input('Enter your key: ')\n        with open('key.txt', 'w') as f:\n            f.write(api_key)\n        console.print('Key file created successfully')\n    except IOError as e:\n        console.print(f'IOError: {e}', style='bold red')\n        exit(1)\n    except Exception as e:\n        console.print(f'Unexpected error: {e}', style='bold red')\n        exit(1)\n</code></pre>"},{"location":"reference/gemini-cli/gemini-cli/#gemini-cli.gemini-cli.load_key_from_root","title":"<code>load_key_from_root()</code>","text":"<p>Loads the key from the root</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>API key</p> </li> </ul> Source code in <code>src/gemini-cli/gemini-cli.py</code> <pre><code>def load_key_from_root() -&gt; str:\n    \"\"\"Loads the key from the root\n\n    Returns:\n        str: API key\n    \"\"\"\n    try:\n        with open('key.txt', 'r') as f:\n            # Check if the key is empty\n            l_key = f.read().strip()\n            if len(l_key) == 0:\n                console.print(\n                    'Key cannot be empty.\\nLink to generate key https://ai.google.dev/gemini-api/docs/api-key',\n                    style='bold red')\n                exit(1)\n            return l_key\n    except FileNotFoundError:\n        create_key_file()\n        return load_key_from_root()\n    except IOError as e:\n        console.print(f'IOError: {e}', style='bold red')\n        exit(1)\n    except Exception as e:\n        console.print(f'Unexpected error: {e}', style='bold red')\n        exit(1)\n</code></pre>"},{"location":"reference/gemini-cli/version/","title":"version","text":""},{"location":"reference/gemini-cli/export/ExportDocx/","title":"ExportDocx","text":""},{"location":"reference/gemini-cli/export/ExportDocx/#gemini-cli.export.ExportDocx.export_md_to_docx","title":"<code>export_md_to_docx(input_text, file_name='output.docx', output_file_path='.')</code>","text":"<p>Export Markdown text to docx file Args:     input_text (str): Markdown text     file_name (str): Name of the output docx file. Default to 'output.docx'.     output_file_path (str): Path to the output docx file. Default to current directory.</p> Source code in <code>src/gemini-cli/export/ExportDocx.py</code> <pre><code>def export_md_to_docx(input_text: str, file_name='output.docx', output_file_path: str = '.'):\n    \"\"\"Export Markdown text to docx file\n    Args:\n        input_text (str): Markdown text\n        file_name (str): Name of the output docx file. Default to 'output.docx'.\n        output_file_path (str): Path to the output docx file. Default to current directory.\n    \"\"\"\n    # Check if Pandoc is installed\n    if not _is_pandoc_installed():\n        console.log(\"Pandoc is not installed. Installing Pandoc is required to export to docx format.\")\n        try:\n            console.log(\"Installing Pandoc...\", style=\"bold\")\n            pydoc.download_pandoc()\n            console.log(\"Pandoc installation complete.\")\n        except Exception as e:\n            console.log(f\"Error installing Pandoc: {e}\\nPlease install Pandoc manually and try again.\",\n                        style=\"bold red\")\n            return None\n\n    # check output file path end with / or not if yes then remove it\n    if output_file_path.endswith('/'):\n        output_file_path = output_file_path[:-1]\n\n    # check filename ends with .docx or not if not then add it\n    if not file_name.endswith('.docx'):\n        file_name = file_name + '.docx'\n    # Convert and save the output to the specified file\n    try:\n        with console.status(\"Exporting to docx...\", spinner=\"dots\"):\n            pydoc.convert_text(input_text, 'docx', format='md', outputfile=f'{output_file_path}/{file_name}')\n        console.log(f\"Markdown text exported to docx: {output_file_path}/{file_name}\", style=\"bold green\")\n    except Exception as e:\n        console.log(f\"Error converting to docx: {e}\", style=\"bold red\")\n        return None\n</code></pre>"},{"location":"reference/gemini-cli/export/__init__/","title":"export","text":""},{"location":"reference/gemini-cli/gemini/__init__/","title":"gemini","text":""},{"location":"reference/gemini-cli/gemini/gemini/","title":"gemini","text":""},{"location":"reference/gemini-cli/gemini/gemini/#gemini-cli.gemini.gemini.Gemini","title":"<code>Gemini</code>","text":"<p>Clas to interact with the Gemini API</p> Source code in <code>src/gemini-cli/gemini/gemini.py</code> <pre><code>class Gemini:\n    \"\"\"Clas to interact with the Gemini API\n    \"\"\"\n\n    def __init__(self, key):\n        if key is None or len(key) == 0:\n            console.print('\u274c', 'API key is required', style='bold red')\n            exit(1)\n        genai.configure(api_key=key)\n        self.__model = genai.GenerativeModel('gemini-1.5-flash')\n\n    def ask(self, question: str, max_words: int = 0) -&gt; str | None:\n        \"\"\"Ask a question to the model\n\n        Args:\n            question (str): Question to ask\n            max_words (int, optional): Word limit. Default to 0.\n        Returns:\n            str | None: Response from the model\n        \"\"\"\n        console.print(f'\ud83d\udc3c', f'Asking: {question}\\n', style='bold blue')\n        with console.status('[bold green]Generating response...', spinner='moon'):\n            try:\n                has_error = False\n                response = self.__model.generate_content(\n                    question if max_words == 0 else question + f' Word limit {max_words}').text\n\n            except Exception as e:\n                has_error = True\n                response = e\n\n        if has_error:\n            console.print('\u274c', f' Error: {response}', style='bold red')\n            return None\n        else:\n            markdown = Markdown(response)\n            console.print(markdown, style='bold green')\n        return response\n\n    def summarize_transcript(self, youtube_url: str, question: str = '', max_words: int = 0) -&gt; str | None:\n        \"\"\"Summarize a transcript from a YouTube video or can answer a question from the transcript\n\n        Args:\n            youtube_url (str): link to the YouTube video\n            question (str, optional): Question to want to ask. Defaults to ''.\n            max_words (int, optional): Word limit. Default to 0.\n        Returns:\n            str | None: Response from the transcript\n        \"\"\"\n        console.print(f'\ud83d\udc3c', f'Getting transcript from: {youtube_url}\\n', style='bold blue')\n        with console.status(f'[bold green]{'Generating answer...' if question else 'Generating summary...'}',\n                            spinner='earth'):\n            try:\n                has_error = False\n                transcript = YoutubeTranscript.get_transcript(youtube_url)\n                if transcript:\n                    base_question = 'Summaries this transcript from youtube \\n' + transcript\n                    q = base_question if len(question) == 0 \\\n                        else base_question + f'\\n\\nQuestion: {question}'\n                    response = self.__model.generate_content(\n                        q if max_words == 0 else q + f' Word limit {max_words}'\n                    ).text\n                else:\n                    has_error = True\n                    response = 'No transcript found'\n            except Exception as e:\n                has_error = True\n                response = e\n        if has_error:\n            console.print('\u274c', f' Error: {response}', style='bold red')\n            return None\n        else:\n            markdown = Markdown(response)\n            console.print(markdown, style='bold green')\n        return response\n\n    def generate_response_from_pdf(self, text: str, question: str, max_words: int = 0) -&gt; str | None:\n        \"\"\"Generate a response from the PDF\n\n        Args:\n            text (str): Text to generate a response from\n            question (str): Question to ask\n            max_words (int, optional): Word limit. Default to 0.\n        Returns:\n            str | None: Response from the PDF\n        \"\"\"\n        console.print(f'\ud83d\udc3c', f'Generating response from the PDF\\n', style='bold blue')\n        with console.status('[bold green]Generating response...', spinner='moon'):\n            try:\n                has_error = False\n                question = text + '\\n\\nSummaries the context as elaborated possible' if len(\n                    question) == 0 else text + f'\\n\\nQuestion: {question}'\n                response = self.__model.generate_content(\n                    question if max_words == 0 else question + f' Word limit {max_words}'\n                ).text\n            except Exception as e:\n                has_error = True\n                response = e\n\n        if has_error:\n            console.print('\u274c', f' Error: {response}', style='bold red')\n            return None\n        else:\n            markdown = Markdown(response)\n            console.print(markdown, style='bold green')\n        return response\n</code></pre>"},{"location":"reference/gemini-cli/gemini/gemini/#gemini-cli.gemini.gemini.Gemini.ask","title":"<code>ask(question, max_words=0)</code>","text":"<p>Ask a question to the model</p> <p>Parameters:</p> <ul> <li> <code>question</code>               (<code>str</code>)           \u2013            <p>Question to ask</p> </li> <li> <code>max_words</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Word limit. Default to 0.</p> </li> </ul> <p>Returns:     str | None: Response from the model</p> Source code in <code>src/gemini-cli/gemini/gemini.py</code> <pre><code>def ask(self, question: str, max_words: int = 0) -&gt; str | None:\n    \"\"\"Ask a question to the model\n\n    Args:\n        question (str): Question to ask\n        max_words (int, optional): Word limit. Default to 0.\n    Returns:\n        str | None: Response from the model\n    \"\"\"\n    console.print(f'\ud83d\udc3c', f'Asking: {question}\\n', style='bold blue')\n    with console.status('[bold green]Generating response...', spinner='moon'):\n        try:\n            has_error = False\n            response = self.__model.generate_content(\n                question if max_words == 0 else question + f' Word limit {max_words}').text\n\n        except Exception as e:\n            has_error = True\n            response = e\n\n    if has_error:\n        console.print('\u274c', f' Error: {response}', style='bold red')\n        return None\n    else:\n        markdown = Markdown(response)\n        console.print(markdown, style='bold green')\n    return response\n</code></pre>"},{"location":"reference/gemini-cli/gemini/gemini/#gemini-cli.gemini.gemini.Gemini.generate_response_from_pdf","title":"<code>generate_response_from_pdf(text, question, max_words=0)</code>","text":"<p>Generate a response from the PDF</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>Text to generate a response from</p> </li> <li> <code>question</code>               (<code>str</code>)           \u2013            <p>Question to ask</p> </li> <li> <code>max_words</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Word limit. Default to 0.</p> </li> </ul> <p>Returns:     str | None: Response from the PDF</p> Source code in <code>src/gemini-cli/gemini/gemini.py</code> <pre><code>def generate_response_from_pdf(self, text: str, question: str, max_words: int = 0) -&gt; str | None:\n    \"\"\"Generate a response from the PDF\n\n    Args:\n        text (str): Text to generate a response from\n        question (str): Question to ask\n        max_words (int, optional): Word limit. Default to 0.\n    Returns:\n        str | None: Response from the PDF\n    \"\"\"\n    console.print(f'\ud83d\udc3c', f'Generating response from the PDF\\n', style='bold blue')\n    with console.status('[bold green]Generating response...', spinner='moon'):\n        try:\n            has_error = False\n            question = text + '\\n\\nSummaries the context as elaborated possible' if len(\n                question) == 0 else text + f'\\n\\nQuestion: {question}'\n            response = self.__model.generate_content(\n                question if max_words == 0 else question + f' Word limit {max_words}'\n            ).text\n        except Exception as e:\n            has_error = True\n            response = e\n\n    if has_error:\n        console.print('\u274c', f' Error: {response}', style='bold red')\n        return None\n    else:\n        markdown = Markdown(response)\n        console.print(markdown, style='bold green')\n    return response\n</code></pre>"},{"location":"reference/gemini-cli/gemini/gemini/#gemini-cli.gemini.gemini.Gemini.summarize_transcript","title":"<code>summarize_transcript(youtube_url, question='', max_words=0)</code>","text":"<p>Summarize a transcript from a YouTube video or can answer a question from the transcript</p> <p>Parameters:</p> <ul> <li> <code>youtube_url</code>               (<code>str</code>)           \u2013            <p>link to the YouTube video</p> </li> <li> <code>question</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Question to want to ask. Defaults to ''.</p> </li> <li> <code>max_words</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Word limit. Default to 0.</p> </li> </ul> <p>Returns:     str | None: Response from the transcript</p> Source code in <code>src/gemini-cli/gemini/gemini.py</code> <pre><code>def summarize_transcript(self, youtube_url: str, question: str = '', max_words: int = 0) -&gt; str | None:\n    \"\"\"Summarize a transcript from a YouTube video or can answer a question from the transcript\n\n    Args:\n        youtube_url (str): link to the YouTube video\n        question (str, optional): Question to want to ask. Defaults to ''.\n        max_words (int, optional): Word limit. Default to 0.\n    Returns:\n        str | None: Response from the transcript\n    \"\"\"\n    console.print(f'\ud83d\udc3c', f'Getting transcript from: {youtube_url}\\n', style='bold blue')\n    with console.status(f'[bold green]{'Generating answer...' if question else 'Generating summary...'}',\n                        spinner='earth'):\n        try:\n            has_error = False\n            transcript = YoutubeTranscript.get_transcript(youtube_url)\n            if transcript:\n                base_question = 'Summaries this transcript from youtube \\n' + transcript\n                q = base_question if len(question) == 0 \\\n                    else base_question + f'\\n\\nQuestion: {question}'\n                response = self.__model.generate_content(\n                    q if max_words == 0 else q + f' Word limit {max_words}'\n                ).text\n            else:\n                has_error = True\n                response = 'No transcript found'\n        except Exception as e:\n            has_error = True\n            response = e\n    if has_error:\n        console.print('\u274c', f' Error: {response}', style='bold red')\n        return None\n    else:\n        markdown = Markdown(response)\n        console.print(markdown, style='bold green')\n    return response\n</code></pre>"},{"location":"reference/gemini-cli/gemini/youtube_transcript/","title":"youtube_transcript","text":""},{"location":"reference/gemini-cli/gemini/youtube_transcript/#gemini-cli.gemini.youtube_transcript.YoutubeTranscript","title":"<code>YoutubeTranscript</code>","text":"Source code in <code>src/gemini-cli/gemini/youtube_transcript.py</code> <pre><code>class YoutubeTranscript:\n\n    @staticmethod\n    def get_video_id(youtube_url):\n        \"\"\"\n        Extract the video ID from a YouTube URL.\n        Args:\n            youtube_url (str): The YouTube URL.\n        Returns:\n            str: The extracted video ID or None if not found.\n        \"\"\"\n        pattern = (r'(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?['\n                   r'?&amp;]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})')\n        match = re.search(pattern, youtube_url)\n        return match.group(1) if match else None\n\n    @staticmethod\n    def get_video_title(video_id):\n        \"\"\"\n        Get the title of the YouTube video.\n        Args:\n            video_id (str): The YouTube video ID.\n        Returns:\n            str: The title of the video or \"Unknown\" if not found.\n        \"\"\"\n        url = f\"https://www.youtube.com/watch?v={video_id}\"\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            matches = re.findall(r'&lt;title&gt;(.*?)&lt;/title&gt;', response.text)\n            return matches[0].replace(\" - YouTube\", \"\") if matches else \"Unknown\"\n        except requests.RequestException as e:\n            console.log(f\"Error fetching video title: {e}\", style='bold red')\n            return \"Unknown\"\n\n    @staticmethod\n    def download_transcript(video_id):\n        \"\"\"\n        Download the transcript and return as a string.\n        Args:\n            video_id (str): The YouTube video ID.\n        Returns:\n            str: The transcript text or an empty string if an error occurs.\n        \"\"\"\n        try:\n            transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n            transcript = transcript_list.find_generated_transcript(['en'])\n\n            formatter = TextFormatter()\n            transcript_text = formatter.format_transcript(transcript.fetch())\n\n            # Remove timecodes and speaker names\n            transcript_text = re.sub(r'\\[\\d+:\\d+:\\d+\\]', '', transcript_text)\n            transcript_text = re.sub(r'&lt;\\w+&gt;', '', transcript_text)\n            return transcript_text\n        except Exception as e:\n            console.log(f\"Error downloading transcript: {e}\", style='bold red')\n            return \"\"\n\n    @staticmethod\n    def get_transcript(youtube_url):\n        video_id = YoutubeTranscript.get_video_id(youtube_url)\n        if video_id:\n            transcript_text = YoutubeTranscript.download_transcript(video_id)\n            if transcript_text:\n                return transcript_text\n            else:\n                console.log(\"Unable to download transcript.\", style='bold red')\n        else:\n            console.log(\"Invalid YouTube URL.\", style='bold red')\n</code></pre>"},{"location":"reference/gemini-cli/gemini/youtube_transcript/#gemini-cli.gemini.youtube_transcript.YoutubeTranscript.download_transcript","title":"<code>download_transcript(video_id)</code>  <code>staticmethod</code>","text":"<p>Download the transcript and return as a string. Args:     video_id (str): The YouTube video ID. Returns:     str: The transcript text or an empty string if an error occurs.</p> Source code in <code>src/gemini-cli/gemini/youtube_transcript.py</code> <pre><code>@staticmethod\ndef download_transcript(video_id):\n    \"\"\"\n    Download the transcript and return as a string.\n    Args:\n        video_id (str): The YouTube video ID.\n    Returns:\n        str: The transcript text or an empty string if an error occurs.\n    \"\"\"\n    try:\n        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)\n        transcript = transcript_list.find_generated_transcript(['en'])\n\n        formatter = TextFormatter()\n        transcript_text = formatter.format_transcript(transcript.fetch())\n\n        # Remove timecodes and speaker names\n        transcript_text = re.sub(r'\\[\\d+:\\d+:\\d+\\]', '', transcript_text)\n        transcript_text = re.sub(r'&lt;\\w+&gt;', '', transcript_text)\n        return transcript_text\n    except Exception as e:\n        console.log(f\"Error downloading transcript: {e}\", style='bold red')\n        return \"\"\n</code></pre>"},{"location":"reference/gemini-cli/gemini/youtube_transcript/#gemini-cli.gemini.youtube_transcript.YoutubeTranscript.get_video_id","title":"<code>get_video_id(youtube_url)</code>  <code>staticmethod</code>","text":"<p>Extract the video ID from a YouTube URL. Args:     youtube_url (str): The YouTube URL. Returns:     str: The extracted video ID or None if not found.</p> Source code in <code>src/gemini-cli/gemini/youtube_transcript.py</code> <pre><code>@staticmethod\ndef get_video_id(youtube_url):\n    \"\"\"\n    Extract the video ID from a YouTube URL.\n    Args:\n        youtube_url (str): The YouTube URL.\n    Returns:\n        str: The extracted video ID or None if not found.\n    \"\"\"\n    pattern = (r'(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?['\n               r'?&amp;]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})')\n    match = re.search(pattern, youtube_url)\n    return match.group(1) if match else None\n</code></pre>"},{"location":"reference/gemini-cli/gemini/youtube_transcript/#gemini-cli.gemini.youtube_transcript.YoutubeTranscript.get_video_title","title":"<code>get_video_title(video_id)</code>  <code>staticmethod</code>","text":"<p>Get the title of the YouTube video. Args:     video_id (str): The YouTube video ID. Returns:     str: The title of the video or \"Unknown\" if not found.</p> Source code in <code>src/gemini-cli/gemini/youtube_transcript.py</code> <pre><code>@staticmethod\ndef get_video_title(video_id):\n    \"\"\"\n    Get the title of the YouTube video.\n    Args:\n        video_id (str): The YouTube video ID.\n    Returns:\n        str: The title of the video or \"Unknown\" if not found.\n    \"\"\"\n    url = f\"https://www.youtube.com/watch?v={video_id}\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        matches = re.findall(r'&lt;title&gt;(.*?)&lt;/title&gt;', response.text)\n        return matches[0].replace(\" - YouTube\", \"\") if matches else \"Unknown\"\n    except requests.RequestException as e:\n        console.log(f\"Error fetching video title: {e}\", style='bold red')\n        return \"Unknown\"\n</code></pre>"},{"location":"reference/gemini-cli/pdf/__init__/","title":"pdf","text":""},{"location":"reference/gemini-cli/pdf/pypdf_helper/","title":"pypdf_helper","text":""},{"location":"reference/gemini-cli/pdf/pypdf_helper/#gemini-cli.pdf.pypdf_helper.PyPdfHelper","title":"<code>PyPdfHelper</code>","text":"Source code in <code>src/gemini-cli/pdf/pypdf_helper.py</code> <pre><code>class PyPdfHelper:\n    def __init__(self, path: str):\n        \"\"\"Initializes the PyPdfHelper class to read PDF files using PyPDF2 library\n        Args:\n            path (str): Path to the PDF file\n        \"\"\"\n        try:\n            self.path = path\n            self.reader = PdfReader(path)\n        except Exception as e:\n            logging.error('Error reading PDF file: %s', e)\n            raise\n\n    def _extract_page_text(self, page_num: int) -&gt; str:\n        try:\n            return self.reader.pages[page_num].extract_text()\n        except Exception as e:\n            logging.error('Error extracting text from page %d: %s', page_num, e)\n            return \"\"\n\n    def get_text(self, start: int = 0, end: int = None) -&gt; str:\n        \"\"\"Extracts text from the PDF file from the given start and end page numbers\n        Args:\n            start (int, optional): Start page index. Default to 0.\n            end (int, optional): End page index. Defaults to None.\n        Returns:\n            str: Extracted text from the PDF file\n        \"\"\"\n        try:\n            end = end if end is not None else self.reader.getNumPages()\n            pages = range(start, end)\n\n            with ThreadPoolExecutor() as executor:\n                texts = executor.map(self._extract_page_text, pages)\n\n            return \"\".join(texts)\n        except Exception as e:\n            logging.error('Error reading PDF file: %s', e)\n            raise\n</code></pre>"},{"location":"reference/gemini-cli/pdf/pypdf_helper/#gemini-cli.pdf.pypdf_helper.PyPdfHelper.__init__","title":"<code>__init__(path)</code>","text":"<p>Initializes the PyPdfHelper class to read PDF files using PyPDF2 library Args:     path (str): Path to the PDF file</p> Source code in <code>src/gemini-cli/pdf/pypdf_helper.py</code> <pre><code>def __init__(self, path: str):\n    \"\"\"Initializes the PyPdfHelper class to read PDF files using PyPDF2 library\n    Args:\n        path (str): Path to the PDF file\n    \"\"\"\n    try:\n        self.path = path\n        self.reader = PdfReader(path)\n    except Exception as e:\n        logging.error('Error reading PDF file: %s', e)\n        raise\n</code></pre>"},{"location":"reference/gemini-cli/pdf/pypdf_helper/#gemini-cli.pdf.pypdf_helper.PyPdfHelper.get_text","title":"<code>get_text(start=0, end=None)</code>","text":"<p>Extracts text from the PDF file from the given start and end page numbers Args:     start (int, optional): Start page index. Default to 0.     end (int, optional): End page index. Defaults to None. Returns:     str: Extracted text from the PDF file</p> Source code in <code>src/gemini-cli/pdf/pypdf_helper.py</code> <pre><code>def get_text(self, start: int = 0, end: int = None) -&gt; str:\n    \"\"\"Extracts text from the PDF file from the given start and end page numbers\n    Args:\n        start (int, optional): Start page index. Default to 0.\n        end (int, optional): End page index. Defaults to None.\n    Returns:\n        str: Extracted text from the PDF file\n    \"\"\"\n    try:\n        end = end if end is not None else self.reader.getNumPages()\n        pages = range(start, end)\n\n        with ThreadPoolExecutor() as executor:\n            texts = executor.map(self._extract_page_text, pages)\n\n        return \"\".join(texts)\n    except Exception as e:\n        logging.error('Error reading PDF file: %s', e)\n        raise\n</code></pre>"}]}